type: edu
custom_name: Log & commit
files:
- name: src/svcs/Main.kt
  visible: true
  text: "package svcs\n\nfun main(args: Array<String>) {\n    val help = \"\"\"\n\
    \                These are SVCS commands:\n                config     Get and\
    \ set a username.\n                add        Add a file to the index.\n     \
    \           log        Show commit logs.\n                commit     Save changes.\n\
    \                checkout   Restore a file.\"\"\".trimIndent()\n             \
    \   \n    val config = \"Get and set a username.\"\n    val add = \"Add a file\
    \ to the index.\"\n    val log = \"Show commit logs.\"\n    val commit = \"Save\
    \ changes.\"\n    val checkout = \"Restore a file.\"\n    \n    when (args.firstOrNull())\
    \ {\n        \"--help\" -> println(help)\n        null -> println(help)\n    \
    \    \"config\" -> println(config)\n        \"add\" -> println(add)\n        \"\
    log\" -> println(log)\n        \"commit\" -> println(commit)\n        \"checkout\"\
    \ -> println(checkout)\n        else -> println(\"'${args.first()}' is not a SVCS\
    \ command.\")\n    }\n}"
  learner_created: false
- name: test/Tests.kt
  visible: false
  text: |
    import org.hyperskill.hstest.dynamic.DynamicTest
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer
    import org.hyperskill.hstest.stage.StageTest
    import org.hyperskill.hstest.testcase.CheckResult
    import org.hyperskill.hstest.testing.TestedProgram
    import java.io.File
    import java.io.File.separatorChar
    import java.io.IOException
    import kotlin.random.Random

    // version 1.2
    class TestStage3 : StageTest<String>() {

        @DynamicTest(order = 1)
        fun checkVcsDirAndFileExistsAfterConfigCommand(): CheckResult {
            deleteVcsDir()
            val dir = File("vcs")
            val configPath = "vcs${separatorChar}config.txt"
            val config =  File(configPath)
            val testFeedback = "\n\nMake sure vcs folder and $configPath file are being created by the program."
            val dirNotFoundMessage = "Could not find vcs folder after executing config command.$testFeedback"
            val configNotFoundMessage = "Could not find $configPath after executing config command.$testFeedback"
            val fileNotFoundMessage = "Your program has thrown some IOException.$testFeedback"

            try {
                val testedProgram = TestedProgram()
                testedProgram.feedbackOnException(java.io.IOException::class.java, fileNotFoundMessage)
                testedProgram.start("config", "Max")

                when {
                    dir.exists().not() || dir.isDirectory.not() -> return CheckResult.wrong(dirNotFoundMessage)
                    config.exists().not() -> return CheckResult.wrong(configNotFoundMessage)
                }

            } finally {
                deleteVcsDir()
            }
            return CheckResult.correct()
        }

        @DynamicTest(order = 2)
        fun checkVcsDirAndFileExistsAfterAddCommand(): CheckResult {

            val dir = File("vcs")
            val indexPath = "vcs${separatorChar}index.txt"
            val index =  File(indexPath)
            val testFeedback = "\n\nMake sure vcs folder and $indexPath file are being created by the program."
            val dirNotFoundMessage = "Could not find vcs folder after executing add command.$testFeedback"
            val configNotFoundMessage = "Could not find $indexPath after executing add command.$testFeedback"
            val fileNotFoundMessage = "Your program has thrown some IOException.$testFeedback"

            val abcFile = File("abc.txt")
            abcFile.createNewFile()

            try {
                val testedProgram = TestedProgram()
                testedProgram.feedbackOnException(java.io.IOException::class.java, fileNotFoundMessage)
                testedProgram.start("add", abcFile.name)

                when {
                    dir.exists().not() || dir.isDirectory.not() -> return CheckResult.wrong(dirNotFoundMessage)
                    index.exists().not() -> return CheckResult.wrong(configNotFoundMessage)
                }

            } finally {
                deleteVcsDir()
                deleteFiles(abcFile)
            }
            return CheckResult.correct()
        }

        @DynamicTest(order = 3)
        fun helpPageTest(): CheckResult {
            try {
                checkHelpPageOutput(TestedProgram().start())
                checkHelpPageOutput(TestedProgram().start("--help"))
            } finally {
                deleteVcsDir()
            }
            return CheckResult.correct()
        }

        @DynamicTest(order = 4)
        fun configTest(): CheckResult {
            try {
                checkOutputString(TestedProgram().start("config"), "Please, tell me who you are.")
                checkOutputString(TestedProgram().start("config", "Max"), "The username is Max.")
                checkOutputString(TestedProgram().start("config"), "The username is Max.")
                checkOutputString(TestedProgram().start("config", "John"), "The username is John.")
                checkOutputString(TestedProgram().start("config"), "The username is John.")
            } finally {
                deleteVcsDir()
            }

            return CheckResult.correct()
        }

        @DynamicTest(order = 5)
        fun addTest(): CheckResult {
            val fileName1 = "file${Random.nextInt(0, 1000)}.txt"
            val fileName2 = "file${Random.nextInt(0, 1000)}.txt"

            val file1 = File(fileName1)
            val file2 = File(fileName2)
            file1.createNewFile()
            file2.createNewFile()

            try {
                checkOutputString(TestedProgram().start("add"), "Add a file to the index.")
                checkOutputString(TestedProgram().start("add", fileName1), "The file '$fileName1' is tracked.")
                checkOutputString(TestedProgram().start("add"), "Tracked files:\n$fileName1")
                checkOutputString(TestedProgram().start("add", fileName2), "The file '$fileName2' is tracked.")
                checkOutputString(TestedProgram().start("add"), "Tracked files:\n$fileName1\n$fileName2")

                val notExistsFileName = "file${Random.nextInt(0, 1000)}.txt"
                checkOutputString(
                    TestedProgram().start("add", notExistsFileName),
                    "Can't find '$notExistsFileName'."
                )
            } finally {
                deleteVcsDir()
                deleteFiles(file1, file2)
            }

            return CheckResult.correct()
        }

        @DynamicTest(order = 6)
        fun checkCommitsDirAndLogFileExistsAfterCommitCommand(): CheckResult {
            val file1 = File("first_file.txt")
            val file2 = File("second_file.txt")

            file1.writeText("some test data for the first file")
            file2.writeText("some test data for the second file")

            val commitsDirPath = "vcs${separatorChar}commits"
            val commitsDir = File(commitsDirPath)
            val logFilePath = "vcs${separatorChar}log.txt"
            val logFile = File(logFilePath)

            val testFeedback = "\n\nMake sure $commitsDirPath folder and $logFilePath file are being created by the program."
            val commitsDirNotFoundMessage = "Could not find $commitsDirPath folder after executing config command.$testFeedback"
            val logNotFoundMessage = "Could not find $logFilePath after executing config command.$testFeedback"
            val fileNotFoundMessage = "Your program has thrown some IOException.$testFeedback"

            try {
                val username = getRandomUserName()

                TestedProgram().start("config", username)
                TestedProgram().start("add", file1.name)
                TestedProgram().start("add", file2.name)

                val commitProgram = TestedProgram()
                commitProgram.feedbackOnException(java.io.IOException::class.java, fileNotFoundMessage)
                commitProgram.start("commit", "Test message")

                when{
                    commitsDir.exists().not() || commitsDir.isDirectory.not() ->
                        return CheckResult.wrong(commitsDirNotFoundMessage)

                    logFile.exists().not() -> return CheckResult.wrong(logNotFoundMessage)
                }

            } finally {
                deleteVcsDir()
                deleteFiles(file1, file2)
            }

            return CheckResult.correct()
        }

        @DynamicTest(order = 7)
        fun commitAndLogTest(): CheckResult {
            val file1 = File("first_file.txt")
            val file2 = File("second_file.txt")

            file1.writeText("some test data for the first file")
            file2.writeText("some test data for the second file")

            try {
                val username = getRandomUserName()

                TestedProgram().start("config", username)
                TestedProgram().start("add", file1.name)
                TestedProgram().start("add", file2.name)

                checkOutputString(TestedProgram().start("log"), "No commits yet.")
                checkOutputString(TestedProgram().start("commit"), "Message was not passed.")
                checkOutputString(TestedProgram().start("commit", "Test message"), "Changes are committed.")

                var got = TestedProgram().start("log")
                var want = "commit [commit id]\n" +
                        "Author: $username\n" +
                        "Test message"

                var regex = Regex(
                    "commit [^\\s]+\n" +
                            "Author: $username\n" +
                            "Test message", RegexOption.IGNORE_CASE
                )
                checkLogOutput(got, want, regex)

                checkOutputString(TestedProgram().start("commit", "Test message2"), "Nothing to commit.")

                file2.appendText("some text")
                checkOutputString(TestedProgram().start("commit", "Test message3"), "Changes are committed.")

                got = TestedProgram().start("log")
                want = "commit [commit id]\n" +
                        "Author: $username\n" +
                        "Test message3\n\n" +
                        "commit [commit id]\n" +
                        "Author: $username\n" +
                        "Test message"
                regex = Regex(
                    "commit [^\\s]+\n" +
                            "Author: $username\n" +
                            "Test message3\n" +
                            "commit [^\\s]+\n" +
                            "Author: $username\n" +
                            "Test message", RegexOption.IGNORE_CASE
                )
                checkLogOutput(got, want, regex)
                checkUniqueCommitHashes(got)

                val commitHashes = parseCommitHashes(got)
                commitHashes.forEach { commitHash ->

                    val commitDirPath = "vcs${separatorChar}commits$separatorChar$commitHash"
                    val commitDir = File(commitDirPath)
                    val versionedFile1 = commitDir.resolve(file1.name)
                    val versionedFile2 = commitDir.resolve(file2.name)
                    val feedbackMessage = "\n\nMake sure you make versions of tracked files on a folder named with the commitId"

                    when{
                        commitDir.exists().not() || commitDir.isDirectory.not() ->
                            return CheckResult.wrong("Could not find folder $commitDirPath$feedbackMessage")
                        versionedFile1.exists().not() ->
                            return CheckResult.wrong("Could not find file ${versionedFile1.name} on $commitDirPath$feedbackMessage")
                        versionedFile2.exists().not() ->
                            return CheckResult.wrong("Could not find file ${versionedFile2.name} on $commitDirPath$feedbackMessage")
                    }
                }

            } finally {
                deleteVcsDir()
                deleteFiles(file1, file2)
            }
            return CheckResult.correct()
        }

        @DynamicTest(order = 8)
        fun checkoutTest(): CheckResult {
            try {
                checkOutputString(TestedProgram().start("checkout"), "Restore a file.")
            } finally {
                deleteVcsDir()
            }
            return CheckResult.correct()
        }

        @DynamicTest(order = 9)
        fun wrongArgTest(): CheckResult {
            try {
                val suffix = Random.nextInt(0,1000)
                checkOutputString(TestedProgram().start("wrongArg$suffix"), "'wrongArg$suffix' is not a SVCS command.")
            } finally {
                deleteVcsDir()
            }
            return CheckResult.correct()
        }

        private fun prepareString(s: String) =
            s.trim().split(" ").filter { it.isNotBlank() }.joinToString(" ")

        private fun prepareLogOutput(s: String) =
            prepareString(s).trim().split('\n').filter { it.isNotBlank() }.joinToString("\n")

        private fun checkHelpPageOutput(got: String) {
            val helpPage = "These are SVCS commands:\n" +
                    "config     Get and set a username.\n" +
                    "add        Add a file to the index.\n" +
                    "log        Show commit logs.\n" +
                    "commit     Save changes.\n" +
                    "checkout   Restore a file."

            if (got.isBlank()) {
                throw WrongAnswer(
                    "Your program should output:\n$helpPage\n\n" +
                            "But printed nothing"
                )
            } else if (!prepareString(got).equals(prepareString(helpPage), true)) {
                throw WrongAnswer(
                    "Your program should output:\n$helpPage\n\n" +
                            "But printed:\n$got"
                )
            }
        }

        private fun checkLogOutput(got: String, want: String, regex: Regex) {
            if (got.isBlank()) {
                throw WrongAnswer(
                    "Your program printed nothing"
                )
            } else if (!prepareLogOutput(got).contains(regex)) {
                throw WrongAnswer(
                    "Your program should output:\n\"$want\",\n" +
                            "but printed:\n\"$got\""
                )
            }
        }

        private fun parseCommitHashes(logOutput: String) : List<String>{
            val regex = Regex(
                "commit ([^\\s]+)", RegexOption.IGNORE_CASE
            )

            return regex.findAll(logOutput).map { it.groupValues[1] }.toList()
        }

        private fun checkUniqueCommitHashes(got: String) {
            val commitHashes = parseCommitHashes(got)

            if (commitHashes.size != commitHashes.toSet().size) {
                throw WrongAnswer(
                    "Commit IDs are not unique"
                )
            }
        }

        private fun checkOutputString(got: String, want: String) {
            if (got.isBlank()) {
                throw WrongAnswer(
                    "Your program should output \"$want\",\n" +
                            "but printed nothing"
                )
            } else if (!prepareString(got).equals(want, true)) {
                throw WrongAnswer(
                    "Your program should output \"$want\",\n" +
                            "but printed: \"$got\""
                )
            }
        }

        private fun getRandomUserName() =
            listOf("Marie", "Anna", "Diane", "Sofie", "Christine").random() + Random.nextInt(1000)

        private fun deleteVcsDir() {
            val dir = File("vcs")
            try {
                if (dir.exists()) {
                    dir.deleteRecursively()
                }
            } catch (ex: IOException) { ex.printStackTrace() }
        }

        private fun deleteFiles(vararg files: File) {
            for(file in files) {
                try { file.delete() } catch (ex: IOException){ ex.printStackTrace() }
            }
        }
    }
  learner_created: false
- name: src/svcs/Log.kt
  visible: true
  text: |-
    import java.io.File

    const val LOG = "log"
    private val LOG_FILE = File("$FOLDER/$LOG.txt")

    fun log() = if (LOG_FILE.isFile) LOG_FILE.forEachLine { println(it) } else println("No commits yet.")

    fun addLog(commit: String, message: String) {
        val previous = File("$FOLDER/temp.txt")
        val commitStr = "commit $commit\n"
        val authorStr = "Author: ${getUserName()}\n"

        if (LOG_FILE.isFile) LOG_FILE.copyTo(previous, true)
        LOG_FILE.writeText(commitStr + authorStr + "$message\n\n")
        if (previous.isFile) {
            previous.forEachBlock(DEFAULT_BUFFER_SIZE) { buffer, bytesRead ->
                LOG_FILE.appendBytes(buffer.copyOfRange(0, bytesRead))
            }
            previous.delete()
        }
    }

    fun lastLogCommit() = if (LOG_FILE.isFile) LOG_FILE.bufferedReader().use { it.readLine().split(" ").last() } else ""
  learner_created: true
- name: src/svcs/Help.kt
  visible: true
  text: |-
    private const val HELP = "--help"
    private const val MAX_SPACE = 11 // largest command length in HELP_MAP + 3
    private val HELP_MAP = mapOf(
        CONFIG to "Get and set a username.",
        ADD to "Add a file to the index.",
        LOG to "Show commit logs.",
        COMMIT to "Save changes.",
        CHECKOUT to "Restore a file."
    )

    fun help(command: String) {
        if (command.isEmpty() || command == HELP) {
            println("These are SVCS commands:")
            HELP_MAP.forEach { (command, description) ->
                println("$command${" ".repeat(MAX_SPACE - command.length)}$description")
            }
        } else {
            println(HELP_MAP.getOrDefault(command, "'$command' is not a SVCS command."))
        }
    }
  learner_created: true
- name: src/svcs/Index.kt
  visible: true
  text: |-
    import java.io.File

    const val ADD = "add"
    private val INDEX = File("$FOLDER/index.txt")

    fun addToIndex(fileName: String) = if (fileName.isNotEmpty()) addFile(fileName) else printIndex()

    fun getIndexFiles(): List<File>? {
        return if (INDEX.isFile) {
            val list = INDEX.readLines().map { File(it) }.filter { it.isFile }
            list.ifEmpty { null }
        } else null
    }

    private fun addFile(fileName: String) {
        if (File(fileName).isFile) {
            if (INDEX.isFile && INDEX.readLines().contains(fileName)) {
                println("$fileName is already added.")
            } else {
                INDEX.appendText("$fileName\n")
                println("The file '$fileName' is tracked.")
            }
        } else println("Can't find '$fileName'.")
    }

    private fun printIndex() {
        if (INDEX.isFile) {
            println("Tracked files:")
            print(INDEX.readText())
        } else help(ADD)
    }
  learner_created: true
- name: src/svcs/Config.kt
  visible: true
  text: |-
    import java.io.File

    const val CONFIG = "config"
    private val CONFIG_FILE = File("$FOLDER/$CONFIG.txt")

    fun config(userName: String) {
        val name = if (userName.isNotEmpty()) {
            CONFIG_FILE.writeText(userName)
            userName
        } else getUserName()

        println(if (name.isEmpty()) "Please, tell me who you are." else "The username is $name.")
    }

    fun getUserName() = if (CONFIG_FILE.isFile) CONFIG_FILE.readText() else ""
  learner_created: true
- name: src/svcs/Commit.kt
  visible: true
  text: |-
    import java.io.File
    import java.security.MessageDigest

    const val COMMIT = "commit"
    const val CHECKOUT = "checkout"
    private const val COMMIT_FOLDER = "$FOLDER/commits"

    fun commit(message: String) {
        var response = if (message.isEmpty()) "Message was not passed." else "Nothing to commit."

        if (message.isNotEmpty()) {
            getIndexFiles()?.let { files ->
                val hash = hashFiles(files)

                if (hash != lastLogCommit()) {
                    addLog(hash, message)
                    copyFiles(files, "$COMMIT_FOLDER/$hash")
                    response = "Changes are committed."
                }
            }
        }
        println(response)
    }

    private fun hashFiles(files: List<File>): String {
        val hash: MessageDigest = MessageDigest.getInstance("SHA-256")

        files.forEach { file ->
            hash.update(file.name.toByteArray())
            file.forEachBlock(DEFAULT_BUFFER_SIZE) { buffer, bytesRead -> hash.update(buffer, 0, bytesRead) }
        }
        return hash.digest().joinToString("") { String.format("%02x", it) }
    }

    private fun copyFiles(files: List<File>, directory: String) {
        if (!File(directory).isDirectory) {
            files.forEach { file ->
                file.copyTo(File("$directory/$file"))
            }
        }
    }

    fun checkout(hash: String) = println(if (hash.isEmpty()) "Commit id was not passed." else revertToCommit(hash))

    fun revertToCommit(hash: String): String {
        val directory = File("$COMMIT_FOLDER/$hash")

        return if (!directory.isDirectory) "Commit does not exist." else {
            directory.copyRecursively(File("./"), true)
            "Switched to commit $hash."
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/177/stages/911/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Wed, 25 Jan 2023 22:02:07 UTC"
record: 3
